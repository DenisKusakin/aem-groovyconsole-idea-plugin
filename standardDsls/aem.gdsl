package standardDsls

def aemScriptContext = context(scope: scriptScope(), filetypes: ['groovy'])


contributor([aemScriptContext]) {
    property name: 'log', type: 'org.slf4j.Logger'
    property name: 'session', type: 'javax.jcr.Session'
    property name: 'pageManager', type: 'com.day.cq.wcm.api.PageManager'
    property name: 'resourceResolver', type: 'org.apache.sling.api.resource.ResourceResolver'
    property name: 'queryBuilder', type: 'com.day.cq.search.QueryBuilder'
    property name: 'nodeBuilder', type: 'groovy.util.BuilderSupport'
    property name: 'pageBuilder', type: 'groovy.util.BuilderSupport'
    property name: 'bundleContext', type: 'org.osgi.framework.BundleContext'
    property name: 'out', type: 'java.io.PrintStream'
    property name: 'slingRequest', type: 'org.apache.sling.api.SlingHttpServletRequest'
    property name: 'slingResponse', type: 'org.apache.sling.api.SlingHttpServletResponse'

    method name: 'getPage',
            params: [path: String.name],
            type: 'com.day.cq.wcm.api.Page',
            doc: 'Get the Page for the given path, or null if it does not exist'

    method name: 'getNode',
            params: [path: String.name],
            type: 'javax.jcr.Node',
            doc: 'Get the Node for the given path. Throws javax.jcr.RepositoryException if it does not exist'

    method name: 'getResource',
            params: [path: String.name],
            type: 'org.apache.sling.api.resource.Resource',
            doc: 'Get the Resource for the given path, or null if it does not exist'

    method name: 'getModel',
            type: Object.name,
            params: [path: String.name, type: Class.name],
            doc: 'Get an instance of a Sling Model class for the Resource at the given path'

    method name: 'getService',
            params: [type: Class.name],
            type: Object,
            doc: 'Get the OSGi service instance for the given type'
    method name: 'getService',
            params: [className: String.name],
            type: Object.name,
            doc: 'Get the OSGi service instance for the class name'

    method name: 'getServices',
            params: [serviceType: Class.name, filter: String.name],
            type: List.name,
            doc: 'Get OSGi services for the given type and filter expression'
    method name: 'getServices',
            params: [className: String.name, filter: String.name],
            type: List.name,
            doc: 'Get OSGi services for the given class name and filter expression'

    method name: 'copy',
            params: [sourceAbsolutePath: String.name, destinationAbsolutePath: String.name],
            type: void,
            doc: 'Groovy DSL syntax for copying a node, equivalent to calling session.workspace.copy(sourceAbsolutePath, destinationAbsolutePath)'
    method name: 'move',
            params: [sourceAbsolutePath: String.name, destinationAbsolutePath: String.name],
            type: void,
            doc: 'Groovy DSL syntax for moving a node, equivalent to calling session.move(sourceAbsolutePath, destinationAbsolutePath), <b>except that the Session is saved automatically when the move is completed</b>'
    method name: 'rename',
            params: [node: 'javax.jcr.Node', newName: String.name],
            type: void,
            doc: 'Groovy DSL syntax for renaming a node, similar to calling session.move(sourceAbsolutePath, destinationAbsolutePath) with the new node name, <b>except that the renamed node will retain its order and the Session is saved automatically when the rename is completed.</b>'

    method name: 'save', type: void, doc: 'Save the current JCR session'

    method name: 'activate',
            params: [path: String.name],
            type: void,
            doc: 'Activate the node at the given path'
    method name: 'activate',
            params: [path: String.name, options: 'com.day.cq.replication.ReplicationOptions'],
            type: void,
            doc: 'Activate the node at the given path with supplied options'

    method name: 'deactivate',
            params: [path: String.name],
            type: void, doc: 'Deactivate the node at the given path'
    method name: 'deactivate',
            params: [path: String.name, options: 'com.day.cq.replication.ReplicationOptions'],
            type: void,
            doc: 'Deactivate the node at the given path with supplied options'

    method name: 'createQuery',
            params: [predicates: Map.name],
            type: 'javax.jcr.query.Query',
            doc: 'Create a Query instance from the QueryBuilder for the current JCR session'
}

contributor([aemScriptContext, context(ctype: 'javax.servlet.ServletRequest')]) {
    method name: 'getAt',
            params: [parameterName: String.name],
            type: Object.name,
            doc: 'Subscript operator to get a request parameter value.  If the value is an array, a list will be returned'
}

contributor([aemScriptContext, context(ctype: 'com.day.cq.wcm.api.Page')]) {
    method name: 'iterator',
            type: 'java.util.Iterator<com.day.cq.wcm.api.Page>',
            doc: 'Allows usage of Groovy closure operators (<code>each</code>, <code>eachWithIndex</code>) to iterate over child pages of the current page'
    method name: 'getNode',
            type: 'javax.jcr.Node',
            doc: 'Get the <code>jcr:content</code> node of the current page, returning null if it does not exist'
    method name: 'get',
            params: [propertyName: String],
            type: Object.name,
            doc: 'Get the named property value from the <code>jcr:content</code> node of the current page, with the return type determined dynamically by <code>javax.jcr.Property#getType()</code>'
    method name: 'set',
            params: [propertyName: String, value: Object.name],
            type: void,
            doc: 'Set the named property value on the <code>jcr:content</code> node of the current page'
}

contributor([aemScriptContext, context(ctype: 'javax.jcr.Node')]) {
    method name: 'iterator',
            type: 'java.util.Iterator<com.day.cq.wcm.api.Page>',
            doc: 'Allows usage of Groovy closure operators (<code>each</code>, <code>eachWithIndex</code>) to iterate over child nodes of the current node'
    method name: 'get',
            params: [propertyName: String],
            type: Object.name,
            doc: 'Get the named property value, with the return type determined dynamically by <code>javax.jcr.Property#getType()</code>'
    method name: 'set',
            params: [propertyName: String, value: Object.name],
            type: void,
            doc: 'Set the named property value. An array value argument can be used to set multi-valued properties'
    method name: 'set',
            params: [properties: Map.name],
            type: void,
            doc: 'Set properties using the key/value pairs in the map as the property names/values'
    method name: 'getOrAddNode',
            params: [name: String.name],
            type: void,
            doc: 'Get the named child node if it exists; otherwise, add it'
    method name: 'getOrAddNode',
            params: [name: String.name, primaryNodeTypeName: String.name],
            type: void,
            doc: 'Get the named child node if it exists; otherwise, add it with the given node type'
    method name: 'removeNode',
            params: [name: String.name],
            type: void,
            doc: 'Remove the child node with the given name, returning true if the node was removed'
}

contributor([aemScriptContext, context(ctype: 'javax.jcr.Binary')]) {
    method name: 'withBinary',
            params: [closure: Closure.name],
            bindsTo: it,
            type: Object.name,
            doc: 'Execute the closure and automatically dispose of the binary\'s resources when the closure completes. The closure accepts a single argument with the current binary instance'
}